#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#pragma warning(disable : 4996)

enum { MAX_INSCRIPTIONS = 50, MAX_CARACTERES = 47, MAX_ROLE = 3, MAX_NOM = 31, MAX_MISSIONS = 300 };

typedef struct {
    char role[MAX_ROLE];
    char nom[MAX_NOM];
}Inscription;

typedef struct {
    unsigned int id;
    char nom[MAX_NOM];
    float renum;
    int niveau;
    bool attribuee;
}Mission;

typedef struct {
    int nb_inscrit;
    int nb_mission;
    Inscription inscriptions[MAX_INSCRIPTIONS];
    Mission missions[MAX_MISSIONS];
}Data;

void separer(char commande[], Data* data);
void estInscription(char role[], char nom[], Data* data);
void estMission(unsigned int id, char nom[], float renum, Data* data);
void estConsultation(Data* data);
void estDetail(unsigned int id, Data* data);
void estAcceptation(unsigned int id_op, unsigned int id_mission, Data* data);
void estSoustraitance(unsigned int id_ag, unsigned int id_mission, float renum, Data* data);

void main() {
    Data data;
    data.nb_inscrit = 0;
    data.nb_mission = 0;
    char commande[MAX_CARACTERES], exit[] = "exit\0";
    bool test = true;

    while (test && data.nb_inscrit < MAX_INSCRIPTIONS) {
        fgets(commande, MAX_CARACTERES, stdin);

        // Supprimer le caractère de saut de ligne s'il est présent
        size_t len = strlen(commande);
        commande[len - 1] = '\0';

        if (strcmp(commande, exit) == 0) 
            test = false;
        
        else if (len > 1 && strcmp(commande, " ") != 0)
            separer(commande, &data);
        
    }
}

void separer(char commande[], Data* data) {
    char esp[] = " ";
    char* temp = strtok(commande, esp);

    if (strcmp(temp, "inscription\0") == 0) {
        temp = strtok(NULL, esp);
        temp[sizeof(data->inscriptions[data->nb_inscrit].role) - 1] = '\0';
        estInscription(temp, strtok(NULL, esp), data);
    }

    else if (strcmp(temp, "mission\0") == 0) {
        temp = strtok(NULL, esp);
        char* temp2 = strtok(NULL, esp);
        estMission(atoi(temp), temp2, atof(strtok(NULL, esp)), data);
    }
    else if (strcmp(temp, "consultation\0") == 0) {
        estConsultation(data);
    }
    else if (strcmp(temp, "detail\0") == 0) {
        temp = strtok(NULL, esp);
        estDetail(atoi(temp), data);
    }
    else if (strcmp(temp, "acceptation\0") == 0) {
        temp = strtok(NULL, esp);
        estAcceptation(atoi(temp), atoi(strtok(NULL, esp)), data);
    }
    else if (strcmp(temp, "sous-traitance\0") == 0) {
        temp = strtok(NULL, esp);
        char* temp2 = strtok(NULL, esp);
        estSoustraitance(atoi(temp), atoi(temp2), atof(strtok(NULL, esp)), data);
    }
}

void estInscription(char role[], char nom[], Data* data) {
    bool test_nom = true;
    if (strcmp(role, "OP\0") == 0 || strcmp(role, "AG\0") == 0 || strcmp(role, "IN\0") == 0) {
        for (int i = 0; i != data->nb_inscrit; ++i) {
            if (strcmp(data->inscriptions[i].nom, nom) == 0)
                test_nom = false;
        }
        if (test_nom) {
            for (int i = 0; i != strlen(role); ++i)
                data->inscriptions[data->nb_inscrit].role[i] = role[i];
            for (int i = 0; i != strlen(nom); ++i)
                data->inscriptions[data->nb_inscrit].nom[i] = nom[i];

            data->inscriptions[data->nb_inscrit].nom[strlen(nom)] = '\0';
            data->inscriptions[data->nb_inscrit].role[strlen(role)] = '\0';
            ++data->nb_inscrit;
            printf("Inscription realisee (%d)\n", data->nb_inscrit);
        }
        else {
            printf("Nom incorrect\n");
        }
    }

    else {
        printf("Role incorrect\n");
    }
}

void estMission(unsigned int id, char nom[], float renum, Data* data) {
    if (strcmp(data->inscriptions[id - 1].role, "OP\0") == 0) {
        if (renum < 0)
            printf("Remuneration incorrecte\n");
        else {
            data->missions[data->nb_mission].renum = roundf(renum * 100) /100;
            data->missions[data->nb_mission].niveau = 0;
            data->missions[data->nb_mission].attribuee = false;
            data->missions[data->nb_mission].id = id;
            for (int i = 0; i != strlen(nom); ++i)
                data->missions[data->nb_mission].nom[i] = nom[i];

            data->missions[data->nb_mission].nom[strlen(nom)] = '\0';
            ++data->nb_mission;
            printf("Mission publiee (%d)\n", data->nb_mission);
        }
    }
    else
        printf("Identifiant incorrect\n");
}

void estConsultation(Data* data) {
    bool test = false;
    for (int i = 0; i != data->nb_mission; ++i) {
        if (!data->missions[i].attribuee) {
            printf("%u %s %s %.2f (%d)\n", i + 1, data->missions[i].nom, data->inscriptions[data->missions[i].id - 1].nom, data->missions[i].renum, data->missions[i].niveau);
            test = true;
        }
    }

    if (!test)
        printf("Aucune mission disponible\n");
}

void estDetail(unsigned int id, Data* data) {
    if (!data->missions[id - 1].attribuee) {
        printf("%u %s %s %.2f (%d)\n", id, data->missions[id - 1].nom, data->inscriptions[data->missions[id - 1].id - 1].nom, data->missions[id - 1].renum, data->missions[id - 1].niveau);
    }
    else
        printf("Identifiant incorrect\n");
}

void estAcceptation(unsigned int id_op, unsigned int id_mission, Data* data) {
    if (strcmp(data->inscriptions[id_op - 1].role, "OP\0") != 0) {
        if (!data->missions[id_mission - 1].attribuee) {
            data->missions[id_mission - 1].attribuee = true;
            data->missions[id_mission - 1].id = id_op;
            printf("Acceptation enregistree\n");
        }
        else
            printf("Mission incorrecte\n");
    }
    else
        printf("Entreprise incorrecte\n");
}

void estSoustraitance(unsigned int id_ag, unsigned int id_mission, float renum, Data* data) {
    if (strcmp(data->inscriptions[id_ag - 1].role, "AG\0") == 0) {
        if (!data->missions[id_mission - 1].attribuee && data->missions[id_mission - 1].niveau <= 5) {
            if (renum > 0) {
                data->missions[id_mission - 1].attribuee = true;
                ++data->missions[id_mission - 1].niveau;

                data->missions[data->nb_mission].renum = roundf(renum * 100) / 100;
                data->missions[data->nb_mission].niveau = 0;
                data->missions[data->nb_mission].attribuee = false;
                data->missions[data->nb_mission].id = id_ag;
                for (int i = 0; i != strlen(data->inscriptions[id_ag-1].nom); ++i)
                    data->missions[data->nb_mission].nom[i] = data->inscriptions[id_ag - 1].nom[i];
                data->missions[data->nb_mission].nom[strlen(data->inscriptions[id_ag - 1].nom)] = '\0';

                ++data->nb_mission;

                printf("Sous-traitance enregistree (%u)\n", data->nb_mission);
            }
            else
                printf("Remuneration incorrecte\n");
        }
        else
            printf("Mission incorrecte\n");
    }
    else
        printf("Entreprise incorrecte\n");
}

void estRapport(Data* data) {

}
