#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#pragma warning(disable : 4996)

enum { MAX_INSCRIPTIONS = 50, MAX_CARACTERES = 47, MAX_ROLE = 3, MAX_NOM = 31, MAX_MISSIONS = 100 };

const char EXIT[] = "exit", ESP[] = " ", OP[] = "OP", AG[] = "AG", IN[] = "IN", INSCRIPTION[] = "inscription",
MISSION[] = "mission", CONSULTATION[] = "consultation", DETAIL[] = "detail", ACCEPTATION[] = "acceptation",
SOUS_TRAITANCE[] = "sous-traitance", RAPPORT[] = "rapport";

typedef struct {
    char role[MAX_ROLE];
    char nom[MAX_NOM];
}Inscription;

typedef struct {
    unsigned int id_E;
    unsigned int id_M;
    char nom[MAX_NOM];
    double renum;
    int niveau;
    bool attribuee;
}Mission;

typedef struct {
    int nb_inscrit;
    int nb_mission;
    Inscription inscriptions[MAX_INSCRIPTIONS];
    Mission missions[MAX_MISSIONS];
}Data;

void separer(char commande[], Data* data);
void estErreur(unsigned int n);
void estInscription(char* role, char* nom, Data* data);
void estMission(unsigned int id, char* nom, double renum, Data* data);
void attribMission(unsigned int id, char* nom, double renum, Data* data);
void estConsultation(const Data* data);
void estDetail(unsigned int id, const Data* data);
void estAcceptation(unsigned int id_op, unsigned int id_mission, Data* data);
void estSoustraitance(unsigned int id_ag, unsigned int id_mission, double renum, Data* data);
void estRapport(Data* data);


void main() {
    Data data;
    data.nb_inscrit = 0;
    data.nb_mission = 0;

    char commande[MAX_CARACTERES];
    bool test = true;

    while (test && data.nb_inscrit < MAX_INSCRIPTIONS) {
        fgets(commande, MAX_CARACTERES, stdin);

        // Supprimer le caractère de saut de ligne s'il est présent
        size_t len = strlen(commande);
        commande[len - 1] = '\0';

        if (strcmp(commande, EXIT) == 0)
            test = false;

        else if (len > 1 && strcmp(commande, ESP) != 0)
            separer(commande, &data);

    }
}

void separer(char commande[], Data* data) {
    char* temp = strtok(commande, ESP);

    if (strcmp(temp, INSCRIPTION) == 0) {
        temp = strtok(NULL, ESP);
        temp[sizeof(data->inscriptions[data->nb_inscrit].role) - 1] = '\0';
        estInscription(temp, strtok(NULL, ESP), data);
    }

    else if (strcmp(temp, MISSION) == 0) {
        temp = strtok(NULL, ESP);
        char* temp2 = strtok(NULL, ESP);
        estMission(atoi(temp), temp2, atof(strtok(NULL, ESP)), data);
    }
    else if (strcmp(temp, CONSULTATION) == 0) {
        estConsultation(data);
    }
    else if (strcmp(temp, DETAIL) == 0) {
        temp = strtok(NULL, ESP);
        estDetail(atoi(temp), data);
    }
    else if (strcmp(temp, ACCEPTATION) == 0) {
        temp = strtok(NULL, ESP);
        estAcceptation(atoi(temp), atoi(strtok(NULL, ESP)), data);
    }
    else if (strcmp(temp, SOUS_TRAITANCE) == 0) {
        temp = strtok(NULL, ESP);
        char* temp2 = strtok(NULL, ESP);
        estSoustraitance(atoi(temp), atoi(temp2), atof(strtok(NULL, ESP)), data);
    }
    else if (strcmp(temp, RAPPORT) == 0) {
        estRapport(data);
    }
}

void estErreur(unsigned int n) {
    switch (n)
    {
    case 0:
        printf("Role incorrect\n");
        break;
    case 1:
        printf("Nom incorrect\n");
        break;
    case 2:
        printf("Identifiant incorrect\n");
        break;
    case 3:
        printf("Aucune mission disponible\n");
        break;
    case 4:
        printf("Mission incorrecte\n");
        break;
    case 5:
        printf("Entreprise incorrecte\n");
        break;
    case 6:
        printf("Remuneration incorrecte\n");
        break;
    default:
        break;
    }
}


void estInscription(char* role, char* nom, Data* data) {
    bool test_nom = true;
    if (strcmp(role, OP) == 0 || strcmp(role, AG) == 0 || strcmp(role, IN) == 0) {
        for (int i = 0; i != data->nb_inscrit; ++i) {
            if (strcmp(data->inscriptions[i].nom, nom) == 0)
                test_nom = false;
        }
        if (test_nom) {
            strcpy(data->inscriptions[data->nb_inscrit].role, role);
            strcpy(data->inscriptions[data->nb_inscrit].nom, nom);
            ++data->nb_inscrit;
            printf("Inscription realisee (%d)\n", data->nb_inscrit);
        }
        else {
            estErreur(1);
        }
    }

    else {
        estErreur(0);
    }
}

void estMission(unsigned int id, char* nom, double renum, Data* data) {
    if (strcmp(data->inscriptions[id - 1].role, OP) == 0) {
        if (renum > 0) {
            attribMission(id, nom, renum, data);
            printf("Mission publiee (%d)\n", data->nb_mission);
        }
        else
            estErreur(6);
    }
    else
        estErreur(2);
}

void attribMission(unsigned int id, char* nom, double renum, Data* data) {
    data->missions[data->nb_mission].renum = roundf(renum * 100) / 100;
    data->missions[data->nb_mission].niveau = 0;
    data->missions[data->nb_mission].attribuee = false;
    data->missions[data->nb_mission].id_E = id;
    data->missions[data->nb_mission].id_M = data->nb_mission;
    strcpy(data->missions[data->nb_mission].nom, nom);
    ++data->nb_mission;
}

void estConsultation(const Data* data) {
    bool test = false;
    for (int i = 0; i != data->nb_mission; ++i) {
        if (!data->missions[i].attribuee) {
            printf("%u %s %s %.2f (%d)\n", i + 1, data->missions[i].nom, data->inscriptions[data->missions[i].id_E - 1].nom, data->missions[i].renum, data->missions[i].niveau);
            test = true;
        }
    }

    if (!test)
        estErreur(3);
}

void estDetail(unsigned int id, const Data* data) {
    if (!data->missions[id - 1].attribuee) {
        printf("%u %s %s %.2f (%d)\n", id, data->missions[id - 1].nom, data->inscriptions[data->missions[id - 1].id_E - 1].nom, data->missions[id - 1].renum, data->missions[id - 1].niveau);
    }
    else
        estErreur(2);
}

void estAcceptation(unsigned int id_op, unsigned int id_mission, Data* data) {
    if (strcmp(data->inscriptions[id_op - 1].role, OP) != 0) {
        if (!data->missions[id_mission - 1].attribuee) {
            data->missions[id_mission - 1].attribuee = true;
            data->missions[id_mission - 1].id_E = id_op;
            printf("Acceptation enregistree\n");
        }
        else
            estErreur(4);
    }
    else
        estErreur(5);
}

void estSoustraitance(unsigned int id_ag, unsigned int id_mission, double renum, Data* data) {
    if (strcmp(data->inscriptions[id_ag - 1].role, AG) == 0) {
        if (!data->missions[id_mission - 1].attribuee && data->missions[id_mission - 1].niveau <= 5) {
            if (renum > 0) {
                unsigned int id_temp = data->missions[id_mission - 1].id_M;
                data->missions[id_mission - 1].attribuee = true;
                ++data->missions[id_mission - 1].niveau;

                attribMission(id_ag, data->inscriptions[id_ag - 1].nom, renum, data);
                data->missions[data->nb_mission - 1].id_M = id_temp;

                printf("Sous-traitance enregistree (%u)\n", data->nb_mission);
            }
            else
                estErreur(6);
        }
        else
            estErreur(4);
    }
    else
        estErreur(5);
}

void estRapport(Data* data) {
    printf("Inscrit : \n");
    for (int i = 0; i != data->nb_inscrit; ++i)
        printf("Role : %s\tNom : %s\n", data->inscriptions[i].role, data->inscriptions[i].nom);
    printf("\n\nMission : \n");
    for (int i = 0; i != data->nb_mission; ++i)
        printf("id : %d\tnom : %s\trenum : %f\tniveau : %d\tattribuee : %s\n", data->missions[i].id_E, data->missions[i].nom, data->missions[i].renum, data->missions[i].niveau, data->missions[i].attribuee ? "true" : "false");
}
