#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#pragma warning(disable : 4996)

enum { MAX_INSCRIPTIONS = 50, MAX_CARACTERES = 47, MAX_ROLE = 3, MAX_NOM = 31, MAX_MISSIONS = 500, MAX_RAPPORT = 3, MAX_ETAT = 4 };

const char EXIT[] = "exit", ESP[] = " ", OP[] = "OP", AG[] = "AG", IN[] = "IN", INSCRIPTION[] = "inscription",
MISSION[] = "mission", CONSULTATION[] = "consultation", DETAIL[] = "detail", ACCEPTATION[] = "acceptation",
SOUS_TRAITANCE[] = "sous-traitance", RAPPORT[] = "rapport", RECAPITULATIF[] = "recapitulatif";

typedef struct {
    char role[MAX_ROLE];
    char nom[MAX_NOM];
}Inscription;

typedef struct {
    unsigned int id_M;
    char nom[MAX_NOM];
    double remun;
    int niveau;
    char etat[MAX_ETAT];
    int rapport[MAX_RAPPORT];
}Mission;

typedef struct {
    int nb_inscrit;
    int nb_mission;
    Inscription inscriptions[MAX_INSCRIPTIONS];
    Mission missions[MAX_MISSIONS];
}Data;

void separer(char commande[], Data* data);
void estErreur(unsigned int n);
void affiche(unsigned int id, char* nom_mission, char* nom_entreprise, double remun, int niveau, Data* data);
void estInscription(char* role, char* nom, Data* data);
void estMission(unsigned int id, char* nom, double remun, Data* data);
void attribMission(unsigned int id, char* nom, double remun, Data* data);
void estConsultation(Data* data);
void estDetail(unsigned int id, Data* data);
void estAcceptation(unsigned int id_op, unsigned int id_mission, Data* data);
void estSoustraitance(unsigned int id_ag, unsigned int id_mission, double remun, Data* data);
void soustraitance(unsigned int id_ag, unsigned int id_mission, double remun, Data* data);
void estRapport(unsigned int id_mission, unsigned int code, Data* data);
void attribRapport(unsigned int id_mission, unsigned int code, Data* data);
void recapitulatif(unsigned int id_ent, Data* data);



int main() {
    Data data;
    data.nb_inscrit = 0;
    data.nb_mission = 0;

    char commande[MAX_CARACTERES];
    bool test = true;

    while (test && data.nb_inscrit < MAX_INSCRIPTIONS) {
        fgets(commande, MAX_CARACTERES, stdin);

        // Supprimer le caractère de saut de ligne s'il est présent
        size_t len = strlen(commande);
        if (len > 0 && commande[len - 1] == '\n') {
            commande[len - 1] = '\0';
        }

        if (strcmp(commande, EXIT) == 0) {
            test = false;
        }
        else {
            separer(commande, &data);
        }
    }
    return 0;
}

void separer(char commande[], Data* data) {
    char* temp = strtok(commande, ESP);

    if (temp == NULL)
        return;

    else if (strcmp(temp, INSCRIPTION) == 0) {
        temp = strtok(NULL, ESP);
        temp[sizeof(data->inscriptions[data->nb_inscrit].role)-1] = '\0';
        estInscription(temp, strtok(NULL, ESP), data);
    }

    else if (strcmp(temp, MISSION) == 0) {
        temp = strtok(NULL, ESP);
        char* temp2 = strtok(NULL, ESP);
        estMission(atoi(temp), temp2, atof(strtok(NULL, ESP)), data);
    }
    else if (strcmp(temp, CONSULTATION) == 0) {
        estConsultation(data);
    }
    else if (strcmp(temp, DETAIL) == 0) {
        temp = strtok(NULL, ESP);
        estDetail(atoi(temp), data);
    }
    else if (strcmp(temp, ACCEPTATION) == 0) {
        temp = strtok(NULL, ESP);
        estAcceptation(atoi(temp), atoi(strtok(NULL, ESP)), data);
    }
    else if (strcmp(temp, SOUS_TRAITANCE) == 0) {
        temp = strtok(NULL, ESP);
        char* temp2 = strtok(NULL, ESP);
        estSoustraitance(atoi(temp), atoi(temp2), atof(strtok(NULL, ESP)), data);
    }
    else if (strcmp(temp, RAPPORT) == 0) {
        temp = strtok(NULL, ESP);
        estRapport(atoi(temp), atoi(strtok(NULL, ESP)), data);
    }
    else if (strcmp(temp, RECAPITULATIF) == 0) {
        recapitulatif(atoi(strtok(NULL, ESP)), data);
    }
}

void estErreur(unsigned int n) {
    switch (n)
    {
    case 0:
        printf("Role incorrect\n");
        break;
    case 1:
        printf("Nom incorrect\n");
        break;
    case 2:
        printf("Identifiant incorrect\n");
        break;
    case 3:
        printf("Aucune mission disponible\n");
        break;
    case 4:
        printf("Mission incorrecte\n");
        break;
    case 5:
        printf("Entreprise incorrecte\n");
        break;
    case 6:
        printf("Remuneration incorrecte\n");
        break;
    case 7:
        printf("Code de retour incorrect\n");
        break;
    default:
        break;
    }
}

void affiche(unsigned int id, char* nom_mission, char* nom_entreprise, double remun, int niveau, Data* data) {
    unsigned int id_taille = 0, mission_taille = 0, ent_taille = 0, remun_taille = 2;
    unsigned int id_temp = id;
    double remun_temp = remun;

    for (int i = 0; i != data->nb_mission; ++i) {
        if (id_temp != 0) {
            id_temp /= 10;
            ++id_taille;
        }
        if (remun_temp != 0) {
            remun_temp /= 10;
            remun_taille += 1;
        }
        if (strlen(nom_mission) > mission_taille)
            mission_taille = strlen(nom_mission);
        if (strlen(nom_entreprise) > ent_taille)
            ent_taille = strlen(nom_entreprise);
    }

    printf("%-*u %-*s %-*s %-*.2f (%d)\n", id_taille, id, mission_taille, nom_mission, ent_taille, nom_entreprise, remun_taille, remun, niveau);
}

void estInscription(char* role, char* nom, Data* data) {
    bool test_nom = true;
    if (strcmp(role, OP) == 0 || strcmp(role, AG) == 0 || strcmp(role, IN) == 0) {
        for (int i = 0; i != data->nb_inscrit; ++i) {
            if (strcmp(data->inscriptions[i].nom, nom) == 0)
                test_nom = false;
        }
        if (test_nom) {
            strcpy(data->inscriptions[data->nb_inscrit].role, role);
            strcpy(data->inscriptions[data->nb_inscrit].nom, nom);
            ++data->nb_inscrit;
            printf("Inscription realisee (%d)\n", data->nb_inscrit);
        }
        else {
            estErreur(1);
        }
    }

    else {
        estErreur(0);
    }
}

void estMission(unsigned int id, char* nom, double remun, Data* data) {
    if (strcmp(data->inscriptions[id - 1].role, OP) == 0) {
        if (remun > 0) {
            attribMission(id, nom, remun, data);
            printf("Mission publiee (%d)\n", data->nb_mission);
        }
        else
            estErreur(6);
    }
    else
        estErreur(2);
}

void attribMission(unsigned int id, char* nom, double remun, Data* data) {
    data->missions[data->nb_mission].remun = (float)(round(remun * 100) / 100);
    data->missions[data->nb_mission].niveau = 0;
    data->missions[data->nb_mission].etat[0] = -1;
    data->missions[data->nb_mission].etat[1] = id;
    data->missions[data->nb_mission].etat[2] = 0;
    data->missions[data->nb_mission].etat[3] = -1;
    data->missions[data->nb_mission].id_M = data->nb_mission;
    strcpy(data->missions[data->nb_mission].nom, nom);
    for (int i = 0; i != MAX_RAPPORT; ++i)
        data->missions[data->nb_mission].rapport[i] = 0;
    ++data->nb_mission;
}

void estConsultation(Data* data) {
    bool test = false;
    for (int i = 0; i != data->nb_mission; ++i) {
        if (data->missions[i].etat[0] == -1) {
            affiche(i + 1, data->missions[i].nom, data->inscriptions[data->missions[i].etat[1] - 1].nom, data->missions[i].remun, data->missions[i].niveau, data);
            test = true;
        }
    }

    if (!test)
        estErreur(3);
}

void estDetail(unsigned int id, Data* data) {
    if (data->missions[id - 1].etat[0] == -1) {
        affiche(id, data->missions[id - 1].nom, data->inscriptions[data->missions[id - 1].etat[1] - 1].nom, data->missions[id - 1].remun, data->missions[id - 1].niveau, data);
        if (data->missions[id - 1].rapport[0] == 1)
            printf("Local non accessible\n");
        if (data->missions[id - 1].rapport[1] == 1)
            printf("Pas de signal dans le boitier general\n");
        if (data->missions[id - 1].rapport[2] == 1)
            printf("Recepteur defectueux\n");
    }
    else
        estErreur(2);
}

void estAcceptation(unsigned int id_op, unsigned int id_mission, Data* data) {
    if (strcmp(data->inscriptions[id_op - 1].role, OP) != 0) {
        if (data->missions[id_mission - 1].etat[0] == -1) {
            data->missions[id_mission - 1].etat[0] = id_op;
            data->missions[id_mission - 1].etat[3] = id_op;
            printf("Acceptation enregistree\n");
        }
        else
            estErreur(4);
    }
    else
        estErreur(5);
}

void estSoustraitance(unsigned int id_ag, unsigned int id_mission, double remun, Data* data) {
    if (strcmp(data->inscriptions[id_ag - 1].role, AG) == 0) {
        if (data->missions[id_mission - 1].etat[0] == -1 && data->missions[id_mission - 1].niveau <= 5) {
            if (remun > 0) {
                soustraitance(id_ag, id_mission, remun, data);
                printf("Sous-traitance enregistree (%u)\n", data->nb_mission);
            }
            else
                estErreur(6);
        }
        else
            estErreur(4);
    }
    else
        estErreur(5);
}

void soustraitance(unsigned int id_ag, unsigned int id_mission, double remun, Data* data) {
    unsigned int id_temp = data->missions[id_mission - 1].id_M;
    data->missions[id_mission - 1].etat[0] = id_ag;

    attribMission(id_ag, data->missions[id_mission - 1].nom, remun, data);
    ++data->missions[data->nb_mission - 1].niveau;
    data->missions[data->nb_mission - 1].id_M = id_temp;
    for (int i = 0; i != MAX_RAPPORT; ++i)
        data->missions[data->nb_mission - 1].rapport[i] = data->missions[id_mission - 1].rapport[i];
}

void estRapport(unsigned int id_mission, unsigned int code, Data* data) {
    bool test = true;
    for (int i = id_mission; i != data->nb_mission; ++i) {
        if (data->missions[i].id_M == data->missions[id_mission - 1].id_M) {
            if (data->missions[i].niveau > data->missions[id_mission - 1].niveau) {
                estErreur(4);
                test = false;
            }
        }
    }
    if (test)
        (code >= 0 && code <= 3) ? attribRapport(id_mission, code, data) : estErreur(7);
}

void attribRapport(unsigned int id_mission, unsigned int code, Data* data) {
    for (int i = 0; i != data->nb_mission; ++i) {
        if (data->missions[i].id_M == data->missions[id_mission - 1].id_M)
            data->missions[i].etat[2] = 1;
    }
    if (code == 0)
        printf("Rapport enregistre\n");

    else if (code == 1) {
        attribMission(data->missions[id_mission - 1].etat[1], data->missions[id_mission - 1].nom, data->missions[id_mission - 1].remun, data);
        data->missions[data->nb_mission - 1].rapport[code - 1] = 1;
        printf("Rapport enregistre (%d)\n", data->nb_mission);
    }
    else if (code == 2) {
        double remun = data->missions[id_mission - 1].remun + (data->missions[id_mission - 1].remun * 0.055);
        attribMission(data->missions[id_mission - 1].etat[1], data->missions[id_mission - 1].nom, remun, data);
        data->missions[data->nb_mission - 1].rapport[code - 1] = 1;
        printf("Rapport enregistre (%d)\n", data->nb_mission);
    }
    else if (code == 3) {
        double remun = data->missions[id_mission - 1].remun + (data->missions[id_mission - 1].remun * 0.040);
        attribMission(data->missions[id_mission - 1].etat[1], data->missions[id_mission - 1].nom, remun, data);
        data->missions[data->nb_mission - 1].rapport[code - 1] = 1;
        printf("Rapport enregistre (%d)\n", data->nb_mission);
    }
}

void recapitulatif(unsigned int id_ent, Data* data) {
    if ((strcmp(data->inscriptions[id_ent - 1].role, OP) == 0) || (strcmp(data->inscriptions[id_ent - 1].role, AG) == 0) || (strcmp(data->inscriptions[id_ent - 1].role, IN) == 0)) {
        bool non_attrib = false, attrib = false, termine = false, a_real = false, real = false;

        for (int i = 0; i != data->nb_mission; ++i) {
            if (data->missions[i].etat[1] == id_ent && data->missions[i].etat[0] == -1)
                non_attrib = true;
            if (data->missions[i].etat[1] == id_ent && data->missions[i].etat[0] != -1 && data->missions[i].etat[0] != id_ent && !data->missions[i].etat[2])
                attrib = true;
            if (data->missions[i].etat[1] == id_ent && data->missions[i].etat[2])
                termine = true;
            if (data->missions[i].etat[3] == id_ent && !data->missions[i].etat[2])
                a_real = true;
            if (data->missions[i].etat[3] == id_ent && data->missions[i].etat[2])
                real = true;
        }

        if (non_attrib) {
            printf("* non attribuees\n");
            for (int i = 0; i != data->nb_mission; ++i) {
                if (data->missions[i].etat[1] == id_ent && data->missions[i].etat[0] == -1) {
                    affiche(i + 1, data->missions[i].nom, data->inscriptions[data->missions[i].etat[1] - 1].nom, data->missions[i].remun, data->missions[i].niveau, data);
                }
            }
        }
        if (attrib) {
            printf("* attribuees\n");
            for (int i = 0; i != data->nb_mission; ++i) {
                if (data->missions[i].etat[1] == id_ent && data->missions[i].etat[0] != -1 && data->missions[i].etat[0] != id_ent && !data->missions[i].etat[2]) {
                    affiche(i + 1, data->missions[i].nom, data->inscriptions[data->missions[i].etat[1] - 1].nom, data->missions[i].remun, data->missions[i].niveau, data);
                }
            }
        }
        if (termine) {
            printf("* terminees\n");
            for (int i = 0; i != data->nb_mission; ++i) {
                if (data->missions[i].etat[1] == id_ent && data->missions[i].etat[2]) {
                    affiche(i + 1, data->missions[i].nom, data->inscriptions[data->missions[i].etat[1] - 1].nom, data->missions[i].remun, data->missions[i].niveau, data);
                }
            }
        }
        if (a_real) {
            printf("* a realiser\n");
            for (int i = 0; i != data->nb_mission; ++i) {
                if (data->missions[i].etat[3] == id_ent && !data->missions[i].etat[2]) {
                    affiche(i + 1, data->missions[i].nom, data->inscriptions[data->missions[i].etat[1] - 1].nom, data->missions[i].remun, data->missions[i].niveau, data);
                }
            }
        }
        if (real) {
            printf("* realisees\n");
            for (int i = 0; i != data->nb_mission; ++i) {
                if (data->missions[i].etat[3] == id_ent && data->missions[i].etat[2]) {
                    affiche(i + 1, data->missions[i].nom, data->inscriptions[data->missions[i].etat[1] - 1].nom, data->missions[i].remun, data->missions[i].niveau, data);
                }
            }
        }
    }
    else
        estErreur(5);
}
